package pattern

/*
	Реализовать паттерн «посетитель».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Visitor_pattern
*/

// Visitor содержит методы для определенных структур
type Visitor struct {
}

// VisitA метод для структуры A
func (v *Visitor) VisitA(a *A) {
	/*...*/
}

// VisitB метод для структуры B
func (v *Visitor) VisitB(b *B) {
	/*...*/
}

// Element содержит метод вызова Visit в обходимых структурах
type Element interface {
	Accept(v *Visitor)
}

// A структура содержащая метод вызова визитера
type A struct {
}

// B структура содержащая метод вызова визитера
type B struct {
}

// Accept вызывает метод визитера для этой структуры
func (a *A) Accept(v *Visitor) {
	v.VisitA(a)
}

// Accept вызывает метод визитера для этой структуры
func (b *B) Accept(v *Visitor) {
	v.VisitB(b)
}

/*
Паттерн "посетитель" обычно применяют для следующих задач:
	1) Выполнить операцию над всеми элементами сложной объектной структуры
	2) Добавить новое поведение для некоторых классов в иерархии (оставив поведение пустым для остальных)

Плюсы:
	+ Упрощает добавление функционала работающего с элементами сложной объектной структуры
	+ Объединение родственных операций в одном месте
	+ Посетитель может накапливать состояние при обходе элементов структуры
Минусы:
	- Паттерн не эффективен при высокой частоте изменения иерархии элементов
	- Потенциальное нарушение инкапсуляции элементов
*/

package main

import (
	"sort"
	"strings"
)

/*
=== Поиск анаграмм по словарю ===

Напишите функцию поиска всех множеств анаграмм по словарю.
Например:
'пятак', 'пятка' и 'тяпка' - принадлежат одному множеству,
'листок', 'слиток' и 'столик' - другому.

Входные данные для функции: ссылка на массив - каждый элемент которого - слово на русском языке в кодировке utf8.
Выходные данные: Ссылка на мапу множеств анаграмм.
Ключ - первое встретившееся в словаре слово из множества
Значение - ссылка на массив, каждый элемент которого, слово из множества. Массив должен быть отсортирован по возрастанию.
Множества из одного элемента не должны попасть в результат.
Все слова должны быть приведены к нижнему регистру.
В результате каждое слово должно встречаться только один раз.

Программа должна проходить все тесты. Код должен проходить проверки go vet и golint.
*/

func GetAnagramSet(data []string) map[string][]string {

	// словарь ключи которого - 33 мерный вектор частоты букв,
	// а значения - множество анаграмм в виде мап
	dict := make(map[[33]uint8]map[string]struct{})

	for _, w := range data {
		// приводим слово к нижнему регистру
		word := strings.ToLower(w)

		// инициализируем вектор частоты букв
		var vec [33]uint8
		// вычисляем вектор для слова
		for _, r := range w {
			vec[r-'а']++
		}

		// проверяем, инициализировано ли множество для этого вектора
		if _, ok := dict[vec]; !ok {
			// если нет, то инициализируем
			dict[vec] = make(map[string]struct{})
		}

		// добавляем слово в множество
		dict[vec][word] = struct{}{}
	}

	// инициализируем структуру для вывода
	result := make(map[string][]string)

	// обходим все множества
	for _, m := range dict {
		// формируем слайс строк с длиной равной кол-ву слов в множестве
		str := make([]string, len(m))

		i := 0
		// обходим все элементы множества
		for s := range m {
			// записываем элементы в слайс
			str[i] = s
			// добавляем записи в возвращаемый слайс:
			// ключ - слово из множества,
			// значение - ссылка на массив элементов множества
			result[s] = str
			i++
		}
		// сортируем слайс множества
		sort.Strings(str)
	}

	return result
}

func main() {

}
